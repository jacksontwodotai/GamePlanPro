[
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "TodoWrite",
    "tool_input": {
      "todos": [
        {
          "content": "Analyze codebase structure and existing patterns",
          "status": "completed",
          "activeForm": "Analyzing codebase structure and existing patterns"
        },
        {
          "content": "Explore existing registration and admin components",
          "status": "completed",
          "activeForm": "Exploring existing registration and admin components"
        },
        {
          "content": "Check backend API endpoints for registrations",
          "status": "completed",
          "activeForm": "Checking backend API endpoints for registrations"
        },
        {
          "content": "Design component architecture for admin dashboard",
          "status": "completed",
          "activeForm": "Designing component architecture for admin dashboard"
        },
        {
          "content": "Implement registration management dashboard",
          "status": "in_progress",
          "activeForm": "Implementing registration management dashboard"
        },
        {
          "content": "Test and verify functionality",
          "status": "pending",
          "activeForm": "Testing and verifying functionality"
        }
      ]
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "Write",
    "tool_input": {
      "file_path": "/Users/jacksontumbidge/Projects/GamePlanPro/frontend/src/components/RegistrationManagementDashboard.tsx",
      "content": "import { useState, useEffect, useCallback } from 'react'\nimport { motion, AnimatePresence } from 'framer-motion'\nimport {\n  Users,\n  Search,\n  Filter,\n  Calendar,\n  DollarSign,\n  MoreHorizontal,\n  Edit,\n  Trash2,\n  Eye,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Download,\n  RefreshCw,\n  AlertCircle\n} from 'lucide-react'\nimport { Button } from './ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card'\nimport { Input } from './ui/input'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select'\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from './ui/dialog'\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from './ui/dropdown-menu'\nimport { useApi } from '../hooks/useApi'\n\ninterface Registration {\n  id: string\n  player_id: string\n  program_id: string\n  status: 'pending' | 'confirmed' | 'cancelled'\n  registration_date: string\n  notes: string | null\n  amount_paid: number\n  total_amount_due: number\n  created_at: string\n  updated_at: string\n  users: {\n    id: string\n    first_name: string\n    last_name: string\n    email: string\n    phone: string\n  }\n  programs: {\n    id: string\n    name: string\n    season: string\n    start_date: string\n    end_date: string\n    base_fee: number\n  }\n}\n\ninterface RegistrationStats {\n  total: number\n  pending: number\n  confirmed: number\n  cancelled: number\n  totalRevenue: number\n  pendingRevenue: number\n}\n\ninterface RegistrationFilters {\n  search: string\n  status: string\n  program_id: string\n  payment_status: string\n  date_from: string\n  date_to: string\n}\n\nconst containerVariants = {\n  hidden: { opacity: 0 },\n  visible: {\n    opacity: 1,\n    transition: {\n      staggerChildren: 0.1,\n      delayChildren: 0.2\n    }\n  }\n}\n\nconst itemVariants = {\n  hidden: { y: 20, opacity: 0 },\n  visible: {\n    y: 0,\n    opacity: 1,\n    transition: {\n      type: \"spring\",\n      stiffness: 100,\n      damping: 15\n    }\n  }\n}\n\nconst statusColors = {\n  pending: 'bg-yellow-100 text-yellow-800',\n  confirmed: 'bg-green-100 text-green-800',\n  cancelled: 'bg-red-100 text-red-800'\n}\n\nconst statusIcons = {\n  pending: Clock,\n  confirmed: CheckCircle,\n  cancelled: XCircle\n}\n\nexport default function RegistrationManagementDashboard() {\n  const [registrations, setRegistrations] = useState<Registration[]>([])\n  const [stats, setStats] = useState<RegistrationStats>({\n    total: 0,\n    pending: 0,\n    confirmed: 0,\n    cancelled: 0,\n    totalRevenue: 0,\n    pendingRevenue: 0\n  })\n  const [programs, setPrograms] = useState<any[]>([])\n  const [filters, setFilters] = useState<RegistrationFilters>({\n    search: '',\n    status: '',\n    program_id: '',\n    payment_status: '',\n    date_from: '',\n    date_to: ''\n  })\n  const [selectedRegistration, setSelectedRegistration] = useState<Registration | null>(null)\n  const [showDetailsDialog, setShowDetailsDialog] = useState(false)\n  const [showUpdateDialog, setShowUpdateDialog] = useState(false)\n  const [newStatus, setNewStatus] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [totalPages, setTotalPages] = useState(1)\n  const [limit] = useState(20)\n\n  const { loading, error, execute } = useApi<any>()\n\n  const fetchRegistrations = useCallback(async () => {\n    try {\n      const queryParams = new URLSearchParams({\n        page: currentPage.toString(),\n        limit: limit.toString(),\n        ...(filters.search && { search: filters.search }),\n        ...(filters.status && { status: filters.status }),\n        ...(filters.program_id && { program_id: filters.program_id }),\n        ...(filters.date_from && { date_from: filters.date_from }),\n        ...(filters.date_to && { date_to: filters.date_to })\n      })\n\n      const response = await execute(`/api/registrations?${queryParams}`)\n      setRegistrations(response.registrations || [])\n\n      if (response.pagination) {\n        setTotalPages(Math.ceil(response.pagination.total / limit))\n      }\n\n      // Calculate stats\n      const all = response.registrations || []\n      const stats: RegistrationStats = {\n        total: all.length,\n        pending: all.filter((r: Registration) => r.status === 'pending').length,\n        confirmed: all.filter((r: Registration) => r.status === 'confirmed').length,\n        cancelled: all.filter((r: Registration) => r.status === 'cancelled').length,\n        totalRevenue: all.reduce((sum: number, r: Registration) => sum + (r.amount_paid || 0), 0),\n        pendingRevenue: all.filter((r: Registration) => r.status === 'pending').reduce((sum: number, r: Registration) => sum + (r.total_amount_due - (r.amount_paid || 0)), 0)\n      }\n      setStats(stats)\n\n    } catch (err) {\n      console.error('Failed to fetch registrations:', err)\n    }\n  }, [currentPage, limit, filters, execute])\n\n  const fetchPrograms = useCallback(async () => {\n    try {\n      const response = await execute('/api/programs')\n      setPrograms(response.programs || [])\n    } catch (err) {\n      console.error('Failed to fetch programs:', err)\n    }\n  }, [execute])\n\n  useEffect(() => {\n    fetchPrograms()\n  }, [fetchPrograms])\n\n  useEffect(() => {\n    fetchRegistrations()\n  }, [fetchRegistrations])\n\n  const handleFilterChange = (key: keyof RegistrationFilters, value: string) => {\n    setFilters(prev => ({ ...prev, [key]: value }))\n    setCurrentPage(1) // Reset to first page when filtering\n  }\n\n  const clearFilters = () => {\n    setFilters({\n      search: '',\n      status: '',\n      program_id: '',\n      payment_status: '',\n      date_from: '',\n      date_to: ''\n    })\n    setCurrentPage(1)\n  }\n\n  const handleUpdateStatus = async () => {\n    if (!selectedRegistration || !newStatus) return\n\n    try {\n      await execute(`/api/registrations/${selectedRegistration.id}`, {\n        method: 'PUT',\n        body: { status: newStatus }\n      })\n\n      await fetchRegistrations()\n      setShowUpdateDialog(false)\n      setSelectedRegistration(null)\n      setNewStatus('')\n    } catch (err) {\n      console.error('Failed to update registration status:', err)\n    }\n  }\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD'\n    }).format(amount)\n  }\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString()\n  }\n\n  const getPaymentStatus = (registration: Registration) => {\n    const paid = registration.amount_paid || 0\n    const due = registration.total_amount_due || 0\n\n    if (paid === 0) return 'unpaid'\n    if (paid >= due) return 'paid'\n    return 'partial'\n  }\n\n  const getPaymentStatusColor = (status: string) => {\n    switch (status) {\n      case 'paid': return 'bg-green-100 text-green-800'\n      case 'partial': return 'bg-yellow-100 text-yellow-800'\n      case 'unpaid': return 'bg-red-100 text-red-800'\n      default: return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  return (\n    <motion.div\n      initial=\"hidden\"\n      animate=\"visible\"\n      variants={containerVariants}\n      className=\"min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 p-6\"\n    >\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <motion.div variants={itemVariants}>\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Registration Management</h1>\n              <p className=\"text-gray-600 mt-1\">Manage player registrations and track payments</p>\n            </div>\n            <div className=\"flex items-center gap-3 mt-4 lg:mt-0\">\n              <Button\n                variant=\"outline\"\n                onClick={fetchRegistrations}\n                disabled={loading}\n              >\n                <RefreshCw className={`h-4 w-4 mr-2 ${loading ? 'animate-spin' : ''}`} />\n                Refresh\n              </Button>\n              <Button variant=\"outline\">\n                <Download className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n        </motion.div>\n\n        {/* Stats Cards */}\n        <motion.div variants={itemVariants}>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 rounded-full bg-blue-100\">\n                    <Users className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Registrations</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{stats.total}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 rounded-full bg-yellow-100\">\n                    <Clock className=\"h-6 w-6 text-yellow-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Pending</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{stats.pending}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 rounded-full bg-green-100\">\n                    <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Confirmed</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{stats.confirmed}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-3 rounded-full bg-green-100\">\n                    <DollarSign className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Revenue</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(stats.totalRevenue)}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </motion.div>\n\n        {/* Filters */}\n        <motion.div variants={itemVariants}>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Filter className=\"h-5 w-5\" />\n                Filters\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search players...\"\n                    value={filters.search}\n                    onChange={(e) => handleFilterChange('search', e.target.value)}\n                    className=\"pl-9\"\n                  />\n                </div>\n\n                <Select value={filters.status} onValueChange={(value) => handleFilterChange('status', value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">All Statuses</SelectItem>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                    <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select value={filters.program_id} onValueChange={(value) => handleFilterChange('program_id', value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Program\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">All Programs</SelectItem>\n                    {programs.map((program) => (\n                      <SelectItem key={program.id} value={program.id}>\n                        {program.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                <Select value={filters.payment_status} onValueChange={(value) => handleFilterChange('payment_status', value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Payment\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"\">All Payments</SelectItem>\n                    <SelectItem value=\"paid\">Paid</SelectItem>\n                    <SelectItem value=\"partial\">Partially Paid</SelectItem>\n                    <SelectItem value=\"unpaid\">Unpaid</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Input\n                  type=\"date\"\n                  placeholder=\"From Date\"\n                  value={filters.date_from}\n                  onChange={(e) => handleFilterChange('date_from', e.target.value)}\n                />\n\n                <Input\n                  type=\"date\"\n                  placeholder=\"To Date\"\n                  value={filters.date_to}\n                  onChange={(e) => handleFilterChange('date_to', e.target.value)}\n                />\n              </div>\n\n              {(filters.search || filters.status || filters.program_id || filters.payment_status || filters.date_from || filters.date_to) && (\n                <div className=\"flex justify-end mt-4\">\n                  <Button variant=\"outline\" onClick={clearFilters}>\n                    Clear Filters\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Registrations Table */}\n        <motion.div variants={itemVariants}>\n          <Card>\n            <CardHeader>\n              <CardTitle>Registrations</CardTitle>\n              <CardDescription>\n                Showing {registrations.length} registrations\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {loading ? (\n                <div className=\"flex items-center justify-center py-8\">\n                  <RefreshCw className=\"h-6 w-6 animate-spin\" />\n                  <span className=\"ml-2\">Loading registrations...</span>\n                </div>\n              ) : error ? (\n                <div className=\"flex items-center justify-center py-8 text-red-600\">\n                  <AlertCircle className=\"h-6 w-6 mr-2\" />\n                  {error}\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Player</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Program</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Date</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Status</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Payment</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Amount</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-600\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      <AnimatePresence>\n                        {registrations.map((registration) => {\n                          const StatusIcon = statusIcons[registration.status]\n                          const paymentStatus = getPaymentStatus(registration)\n\n                          return (\n                            <motion.tr\n                              key={registration.id}\n                              initial={{ opacity: 0, y: 20 }}\n                              animate={{ opacity: 1, y: 0 }}\n                              exit={{ opacity: 0, y: -20 }}\n                              className=\"border-b hover:bg-gray-50\"\n                            >\n                              <td className=\"py-4 px-4\">\n                                <div>\n                                  <p className=\"font-medium text-gray-900\">\n                                    {registration.users.first_name} {registration.users.last_name}\n                                  </p>\n                                  <p className=\"text-sm text-gray-500\">{registration.users.email}</p>\n                                </div>\n                              </td>\n                              <td className=\"py-4 px-4\">\n                                <div>\n                                  <p className=\"font-medium text-gray-900\">{registration.programs.name}</p>\n                                  <p className=\"text-sm text-gray-500\">{registration.programs.season}</p>\n                                </div>\n                              </td>\n                              <td className=\"py-4 px-4 text-gray-900\">\n                                {formatDate(registration.registration_date)}\n                              </td>\n                              <td className=\"py-4 px-4\">\n                                <span className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${statusColors[registration.status]}`}>\n                                  <StatusIcon className=\"h-3 w-3\" />\n                                  {registration.status.charAt(0).toUpperCase() + registration.status.slice(1)}\n                                </span>\n                              </td>\n                              <td className=\"py-4 px-4\">\n                                <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getPaymentStatusColor(paymentStatus)}`}>\n                                  {paymentStatus.charAt(0).toUpperCase() + paymentStatus.slice(1)}\n                                </span>\n                              </td>\n                              <td className=\"py-4 px-4\">\n                                <div>\n                                  <p className=\"font-medium text-gray-900\">\n                                    {formatCurrency(registration.amount_paid || 0)} / {formatCurrency(registration.total_amount_due)}\n                                  </p>\n                                  {registration.amount_paid < registration.total_amount_due && (\n                                    <p className=\"text-sm text-red-600\">\n                                      Balance: {formatCurrency(registration.total_amount_due - (registration.amount_paid || 0))}\n                                    </p>\n                                  )}\n                                </div>\n                              </td>\n                              <td className=\"py-4 px-4\">\n                                <DropdownMenu>\n                                  <DropdownMenuTrigger asChild>\n                                    <Button variant=\"ghost\" size=\"sm\">\n                                      <MoreHorizontal className=\"h-4 w-4\" />\n                                    </Button>\n                                  </DropdownMenuTrigger>\n                                  <DropdownMenuContent align=\"end\">\n                                    <DropdownMenuItem\n                                      onClick={() => {\n                                        setSelectedRegistration(registration)\n                                        setShowDetailsDialog(true)\n                                      }}\n                                    >\n                                      <Eye className=\"h-4 w-4 mr-2\" />\n                                      View Details\n                                    </DropdownMenuItem>\n                                    <DropdownMenuItem\n                                      onClick={() => {\n                                        setSelectedRegistration(registration)\n                                        setNewStatus(registration.status)\n                                        setShowUpdateDialog(true)\n                                      }}\n                                    >\n                                      <Edit className=\"h-4 w-4 mr-2\" />\n                                      Update Status\n                                    </DropdownMenuItem>\n                                    <DropdownMenuSeparator />\n                                    <DropdownMenuItem className=\"text-red-600\">\n                                      <Trash2 className=\"h-4 w-4 mr-2\" />\n                                      Cancel Registration\n                                    </DropdownMenuItem>\n                                  </DropdownMenuContent>\n                                </DropdownMenu>\n                              </td>\n                            </motion.tr>\n                          )\n                        })}\n                      </AnimatePresence>\n                    </tbody>\n                  </table>\n\n                  {registrations.length === 0 && (\n                    <div className=\"text-center py-8 text-gray-500\">\n                      No registrations found matching your criteria.\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Pagination */}\n              {totalPages > 1 && (\n                <div className=\"flex items-center justify-between mt-6 pt-6 border-t\">\n                  <div className=\"text-sm text-gray-600\">\n                    Page {currentPage} of {totalPages}\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}\n                      disabled={currentPage === 1}\n                    >\n                      Previous\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}\n                      disabled={currentPage === totalPages}\n                    >\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n\n      {/* Registration Details Dialog */}\n      <Dialog open={showDetailsDialog} onOpenChange={setShowDetailsDialog}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Registration Details</DialogTitle>\n            <DialogDescription>\n              Complete information for this registration\n            </DialogDescription>\n          </DialogHeader>\n          {selectedRegistration && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-3\">Player Information</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div>\n                      <span className=\"font-medium\">Name:</span> {selectedRegistration.users.first_name} {selectedRegistration.users.last_name}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Email:</span> {selectedRegistration.users.email}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Phone:</span> {selectedRegistration.users.phone}\n                    </div>\n                  </div>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-gray-900 mb-3\">Program Information</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div>\n                      <span className=\"font-medium\">Program:</span> {selectedRegistration.programs.name}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Season:</span> {selectedRegistration.programs.season}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Dates:</span> {formatDate(selectedRegistration.programs.start_date)} - {formatDate(selectedRegistration.programs.end_date)}\n                    </div>\n                    <div>\n                      <span className=\"font-medium\">Fee:</span> {formatCurrency(selectedRegistration.programs.base_fee)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"font-medium text-gray-900 mb-3\">Registration Details</h4>\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"font-medium\">Status:</span>\n                    <span className={`ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${statusColors[selectedRegistration.status]}`}>\n                      {selectedRegistration.status.charAt(0).toUpperCase() + selectedRegistration.status.slice(1)}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Registration Date:</span> {formatDate(selectedRegistration.registration_date)}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Amount Paid:</span> {formatCurrency(selectedRegistration.amount_paid || 0)}\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Total Due:</span> {formatCurrency(selectedRegistration.total_amount_due)}\n                  </div>\n                </div>\n                {selectedRegistration.notes && (\n                  <div className=\"mt-4\">\n                    <span className=\"font-medium\">Notes:</span>\n                    <p className=\"mt-1 text-gray-600\">{selectedRegistration.notes}</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Update Status Dialog */}\n      <Dialog open={showUpdateDialog} onOpenChange={setShowUpdateDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Update Registration Status</DialogTitle>\n            <DialogDescription>\n              Change the status of this registration\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-gray-700\">New Status</label>\n              <Select value={newStatus} onValueChange={setNewStatus}>\n                <SelectTrigger className=\"mt-1\">\n                  <SelectValue placeholder=\"Select new status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"flex justify-end gap-3\">\n              <Button variant=\"outline\" onClick={() => setShowUpdateDialog(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleUpdateStatus} disabled={!newStatus || loading}>\n                {loading ? 'Updating...' : 'Update Status'}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </motion.div>\n  )\n}"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "Read",
    "tool_input": {
      "file_path": "/Users/jacksontumbidge/Projects/GamePlanPro/frontend/src/App.tsx"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "Edit",
    "tool_input": {
      "file_path": "/Users/jacksontumbidge/Projects/GamePlanPro/frontend/src/App.tsx",
      "old_string": "import RegistrationFlow from './components/RegistrationFlow'\nimport PublicRegistration from './components/PublicRegistration'\nimport FormManagement from './components/FormManagement'\nimport FormEditor from './components/FormEditor'",
      "new_string": "import RegistrationFlow from './components/RegistrationFlow'\nimport PublicRegistration from './components/PublicRegistration'\nimport RegistrationManagementDashboard from './components/RegistrationManagementDashboard'\nimport FormManagement from './components/FormManagement'\nimport FormEditor from './components/FormEditor'"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "Edit",
    "tool_input": {
      "file_path": "/Users/jacksontumbidge/Projects/GamePlanPro/frontend/src/App.tsx",
      "old_string": "          <Route path=\"programs\" element={<ProgramManagement />} />\n          <Route path=\"forms\" element={<FormManagement />} />\n          <Route path=\"forms/new\" element={<FormEditor />} />\n          <Route path=\"forms/:formId\" element={<FormEditor />} />",
      "new_string": "          <Route path=\"programs\" element={<ProgramManagement />} />\n          <Route path=\"registrations\" element={<RegistrationManagementDashboard />} />\n          <Route path=\"forms\" element={<FormManagement />} />\n          <Route path=\"forms/new\" element={<FormEditor />} />\n          <Route path=\"forms/:formId\" element={<FormEditor />} />"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "Edit",
    "tool_input": {
      "file_path": "/Users/jacksontumbidge/Projects/GamePlanPro/frontend/src/components/Layout.tsx",
      "old_string": "import {\n  Home,\n  Shield,\n  Users,\n  Menu,\n  LogOut,\n  Calendar,\n  Settings,\n  FileText,\n  GraduationCap,\n  FormInput\n} from 'lucide-react'",
      "new_string": "import {\n  Home,\n  Shield,\n  Users,\n  Menu,\n  LogOut,\n  Calendar,\n  Settings,\n  FileText,\n  GraduationCap,\n  FormInput,\n  UserCheck\n} from 'lucide-react'"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "Edit",
    "tool_input": {
      "file_path": "/Users/jacksontumbidge/Projects/GamePlanPro/frontend/src/components/Layout.tsx",
      "old_string": "  {\n    name: 'Programs',\n    href: '/programs',\n    icon: GraduationCap,\n  },\n  {\n    name: 'Forms',\n    href: '/dashboard/forms',\n    icon: FormInput,\n  },",
      "new_string": "  {\n    name: 'Programs',\n    href: '/programs',\n    icon: GraduationCap,\n  },\n  {\n    name: 'Registrations',\n    href: '/dashboard/registrations',\n    icon: UserCheck,\n  },\n  {\n    name: 'Forms',\n    href: '/dashboard/forms',\n    icon: FormInput,\n  },"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "TodoWrite",
    "tool_input": {
      "todos": [
        {
          "content": "Analyze codebase structure and existing patterns",
          "status": "completed",
          "activeForm": "Analyzing codebase structure and existing patterns"
        },
        {
          "content": "Explore existing registration and admin components",
          "status": "completed",
          "activeForm": "Exploring existing registration and admin components"
        },
        {
          "content": "Check backend API endpoints for registrations",
          "status": "completed",
          "activeForm": "Checking backend API endpoints for registrations"
        },
        {
          "content": "Design component architecture for admin dashboard",
          "status": "completed",
          "activeForm": "Designing component architecture for admin dashboard"
        },
        {
          "content": "Implement registration management dashboard",
          "status": "completed",
          "activeForm": "Implementing registration management dashboard"
        },
        {
          "content": "Test and verify functionality",
          "status": "in_progress",
          "activeForm": "Testing and verifying functionality"
        }
      ]
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "BashOutput",
    "tool_input": {
      "bash_id": "00fb38"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "BashOutput",
    "tool_input": {
      "bash_id": "2af89c"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "KillShell",
    "tool_input": {
      "shell_id": "2af89c"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "Bash",
    "tool_input": {
      "command": "npm start",
      "description": "Start backend server",
      "run_in_background": true
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "BashOutput",
    "tool_input": {
      "bash_id": "b2e965"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "Bash",
    "tool_input": {
      "command": "lsof -ti:2004 | xargs kill -9",
      "description": "Kill process using port 2004"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "Bash",
    "tool_input": {
      "command": "npm start",
      "description": "Start backend server again",
      "run_in_background": true
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "BashOutput",
    "tool_input": {
      "bash_id": "4aaac7"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "BashOutput",
    "tool_input": {
      "bash_id": "00fb38"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "Bash",
    "tool_input": {
      "command": "cd frontend && npm run lint",
      "description": "Run frontend linting"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "Bash",
    "tool_input": {
      "command": "cd frontend && npx eslint src/components/RegistrationManagementDashboard.tsx",
      "description": "Check linting for new registration management dashboard"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "Edit",
    "tool_input": {
      "file_path": "/Users/jacksontumbidge/Projects/GamePlanPro/frontend/src/components/RegistrationManagementDashboard.tsx",
      "old_string": "import {\n  Users,\n  Search,\n  Filter,\n  Calendar,\n  DollarSign,\n  MoreHorizontal,\n  Edit,\n  Trash2,\n  Eye,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Download,\n  RefreshCw,\n  AlertCircle\n} from 'lucide-react'",
      "new_string": "import {\n  Users,\n  Search,\n  Filter,\n  DollarSign,\n  MoreHorizontal,\n  Edit,\n  Trash2,\n  Eye,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Download,\n  RefreshCw,\n  AlertCircle\n} from 'lucide-react'"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "Edit",
    "tool_input": {
      "file_path": "/Users/jacksontumbidge/Projects/GamePlanPro/frontend/src/components/RegistrationManagementDashboard.tsx",
      "old_string": "{\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n}",
      "new_string": "{\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n}"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "Edit",
    "tool_input": {
      "file_path": "/Users/jacksontumbidge/Projects/GamePlanPro/frontend/src/components/RegistrationManagementDashboard.tsx",
      "old_string": "  const [programs, setPrograms] = useState<any[]>([])",
      "new_string": "  const [programs, setPrograms] = useState<{ id: string; name: string; season: string }[]>([])"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "Edit",
    "tool_input": {
      "file_path": "/Users/jacksontumbidge/Projects/GamePlanPro/frontend/src/components/RegistrationManagementDashboard.tsx",
      "old_string": "  const { loading, error, execute } = useApi<any>()",
      "new_string": "  const { loading, error, execute } = useApi<{ registrations: Registration[]; pagination?: { total: number } }>()"
    }
  },
  {
    "session_id": "94ed5528-1027-4a3f-ae9f-813f52e9b844",
    "transcript_path": "/Users/jacksontumbidge/.claude/projects/-Users-jacksontumbidge-Projects-GamePlanPro/94ed5528-1027-4a3f-ae9f-813f52e9b844.jsonl",
    "cwd": "/Users/jacksontumbidge/Projects/GamePlanPro",
    "permission_mode": "bypassPermissions",
    "hook_event_name": "PreToolUse",
    "tool_name": "Bash",
    "tool_input": {
      "command": "cd frontend && npx eslint src/components/RegistrationManagementDashboard.tsx",
      "description": "Check linting for updated registration management dashboard"
    }
  }
]